#https://leetcode.com/problems/count-complete-tree-nodes/
#Input: root = [1,2,3,4,5,6]
#Output: 6


# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution:
    def countNodes(self, root: TreeNode) -> int:
        if not root:
            return 0
        
        left = self.getLeftHeight(root) #logn op
        right = self.getRightHeight(root) #logn op
        
        if left == right:
            count = (2**left)-1 #if left == right then it's a complete BT. number of nodes in a comp BT is 2^h-1
            return count
        else:
            #one subtree will always return immediately because it is complete. Hence time complexity is O(logn)
            return self.countNodes(root.left) + self.countNodes(root.right) + 1 
        
    
    def getLeftHeight(self, root):
        count=1
        while root.left:
            count += 1
            root = root.left
        return count
    
    def getRightHeight(self, root):
        count=1
        while root.right:
            count += 1
            root = root.right
        return count
        
        