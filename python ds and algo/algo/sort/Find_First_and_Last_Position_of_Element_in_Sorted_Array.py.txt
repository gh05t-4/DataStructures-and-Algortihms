#https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/
#Input: nums = [5,7,7,8,8,10], target = 8
#Output: [3,4]

class Solutions:
	def searchRange(self, nums: List[int], target: int) -> List[int]:
		def binarySearch(nums,left,right,target):
			while left<=right:
				mid = (left+right)//2
				foundVal = nums[mid]
				if foundVal == target:
					return mid

				elif foundVal<target:
					left =  mid+1
				else:
					right = mid-1
			return -1
		if len(nums)==0:
			return [-1,-1]
		firstPos = binarySearch(nums,0,len(nums)-1,target)
		if firstPos == -1:
			return [-1,-1]
		startPos = firstPos
		endPos = firstPos
		temp1,temp2 = 0,0
		while startPos!=-1:
			temp1 = startPos
			startPos = binarySearch(nums,0,startPos-1,target)
		startPos = temp1
		while endPos!=-1:
			temp2 = endPos
			endPos = binarySearch(nums,endPos+1,len(nums)-1,target)
		endPos = temp2
		return [startPos,endPos]
			